# INICIO DEL ENCABEZADO DE DERECHOS DE AUTOR GENERADO AUTOMÁTICAMENTE
# Copyright (C) 2019-2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
# FIN DEL ENCABEZADO DE DERECHOS DE AUTOR GENERADO AUTOMÁTICAMENTE

nombre: Construir

en:
  envío_flujo de trabajo:
  empujar:
    sucursales:
      - '*'
    etiquetas:
      - '*'
  solicitud de extracción:
    sucursales:
      - '*'

concurrencia:
  grupo: compilación-${{ github.ref_name }}
  cancelación en curso: verdadero

entorno:
  CACHE_VERSION: "2022-12-02"

trabajos:
  ventanas:
    estrategia:
      fallo rápido: falso
      matriz:
        corredor: ["windows-2022"]
        nombre: [ "Windows" ]
        compilador: [ "MSVC"]
        cuarto: [ 6 ]
        incluir:
          - compilador: "MSVC"
            nombre_paquete: "ventanas"
            CMAKE_SYSTEM_VERSION: "10.0.20348.0"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM: "x64"
    se ejecuta: "${{ Matrix.runner }}"
    nombre: "${{ matriz.nombre }} (${{ matriz.compiler }})"
    entorno:
      CMAKE_GENERATOR: "${{ matriz.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matriz.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matriz.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matriz.CMAKE_SYSTEM_VERSION }}"
    pasos:
    - nombre: "Clon"
      usos: acciones/compra@v3
      con:
        submódulos: recursivo
        profundidad de búsqueda: 0
    - nombre: "Recopilar información"
      identificación: información
      caparazón: bash
      ejecutar: |
        # Definir archivo de especificación de compilación
        buildspec="${{ github.workspace }}/tercero/obs-studio/buildspec.json"

        # Versión de dependencias prediseñadas
        IFS=$'\n' buildspecdata=($(node ​​tools/buildspec.js "${buildspec}" "precompilado" "windows-x64"))
        echo "obs_deps_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "obs_deps_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "obs_deps_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Versión Qt
        IFS=$'\n' buildspecdata=($(node ​​tools/buildspec.js "${buildspec}" "qt${{ Matrix.qt }}" "windows-x64"))
        echo "qt_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "qt_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "qt_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Versión libOBS
        echo "obs_version=$(cd "${{ github.workspace }}/third-party/obs-studio" && git describe --tags --long)" >> "$GITHUB_ENV"
    - nombre: "Dependencia: Qt (caché)"
      ID: qt-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/qt"
        clave: "qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Qt"
      identificación: qt
      si: ${{ pasos.qt-cache.outputs.cache-hit != 'verdadero' }}
      caparazón: bash
      ejecutar: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/qt.zip "${{ env.qt_url }}"
        si [[ ! -f "${{ github.workspace }}/build/qt" ]]; luego mkdir -p "${{ github.workspace }}/build/qt"; fi
        7z x -y -o"${{ github.workspace }}/build/qt" -- "/tmp/qt.zip"
    - nombre: "Dependencia: Dependencias prediseñadas de OBS Studio (caché)"
      id: obsdeps-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/obsdeps"
        clave: "obsdeps${{ env.obs_deps_hash }}-${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Dependencias prediseñadas de OBS Studio"
      identificación: obsdeps
      si: ${{ pasos.obsdeps-cache.outputs.cache-hit != 'verdadero' }}
      caparazón: bash
      ejecutar: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/obsdeps.zip "${{ env.obs_deps_url }}"
        si [[ ! -f "${{ github.workspace }}/build/obsdeps" ]]; luego mkdir -p "${{ github.workspace }}/build/obsdeps"; fi
        7z x -y -o"${{ github.workspace }}/build/obsdeps" -- "/tmp/obsdeps.zip"
    - nombre: "Dependencia: Bibliotecas OBS (caché)"
      id: obs-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/obs"
        clave: "obs${{ env.obs_version }}-${{ Matrix.runner }}_${{ Matrix.compiler }}-obsdeps${{ env.obs_deps_hash }}-qt${{ env.qt_hash }} -${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Bibliotecas OBS"
      identificación: observación
      si: ${{ pasos.obs-cache.outputs.cache-hit != 'verdadero' }}
      entorno:
        # obs-studio no es compatible con ClangCL
        CMAKE_GENERATOR_TOOLSET: ""
      caparazón: bash
      ejecutar: |
        # Aplicar parches a obs-studio
        pushd "${{ github.workspace }}/tercero/obs-studio" > /dev/null
        para f en ../../patches/obs-studio/*.patch; hacer
          echo "Aplicando parche '${f}''..."
          [ -e "$f" ] || continuar
          aplicar git "$f"
        hecho
        popd > /dev/null

        # Construir obs-studio
        cmake \
          -S "${{ github.workspace }}/tercero/obs-studio" \
          -B "${{ github.workspace }}/build/obs" \
          -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obsdeps;${{ github.workspace }}/build/qt" \
          -DENABLE_PLUGINS=DESACTIVADO \
          -DENABLE_UI=DESACTIVADO \
          -DENABLE_SCRIPTING=DESACTIVADO
        cmake \
          --build "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --target obs-frontend-api
        cmake \
          --instalar "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --componente obs_libraries
    - nombre: "Configurar"
      continuar en caso de error: verdadero
      caparazón: bash
      ejecutar: |
        cmake \
          -S "${{ github.espacio de trabajo }}" \
          -B "${{ github.workspace }}/build/ci" \
          -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/ci/install" \
          -DPACKAGE_NAME="streamfx-${{ matriz.nombre_paquete }}" \
          -DPACKAGE_PREFIX="${{ github.workspace }}/build/paquete" \
          -Dlibobs_DIR="${{ github.workspace }}/build/obs/install" \
          -DQt${{ matriz.qt }}_DIR="${{ github.workspace }}/build/qt" \
          -DFFmpeg_DIR="${{ github.workspace }}/build/obsdeps" \
          -DCURL_DIR="${{ github.workspace }}/build/obsdeps"
    - nombre: "Compilación: Depurar"
      continuar en caso de error: verdadero
      caparazón: bash
      entorno:
        CMAKE_BUILD_TYPE: "Depurar"
      ejecutar: |
        cmake --build "build/ci" --config ${{ env.CMAKE_BUILD_TYPE }} --target StreamFX
    - nombre: "Compilación: Lanzamiento"
      caparazón: bash
      entorno:
        CMAKE_BUILD_TYPE: "RelWithDebInfo"
      ejecutar: |
        cmake --build "build/ci" --config ${{ env.CMAKE_BUILD_TYPE }} --target instalación
    - nombre: "Embalaje: Instalar InnoSetup"
      si: comienza con (matriz.runner, 'windows')
      ejecutar: |
        curl "-kL" "https://www.dropbox.com/scl/fi/sda9ecx9qzqiaq8ifryi1/innosetup-6.2.1.exe?rlkey=5jf07t109j34dppvmuen36271&dl=1" "-f" "--retry" "5" "- o" "inno.exe"
        .\inno.exe /MUYSILENT /SP- /SUPPRESSMSGBOXES /NORESTART
    - nombre: "Embalaje"
      caparazón: cmd
      ejecutar: |
        "C:\Archivos de programa (x86)\Inno Setup 6\ISCC.exe" /V10 ".\build\ci\installer.iss"
    - nombre: "Artefactos"
      usos: acciones/upload-artifact@v1
      con:
        nombre: "${{ Matrix.runner }}-${{ Matrix.compiler }}-qt${{ Matrix.qt }}"
        ruta: "${{ github.workspace }}/build/paquete"
  Mac OS:
    estrategia:
      fallo rápido: falso
      matriz:
        corredor: [ "macos-12" ]
        compilador: ["sonido metálico"]
        cuarto: [ 6 ]
        incluir:
          - compilador: "Clang"
            nombre: "MacOS"
            nombre_paquete: "macos"
            CMAKE_GENERATOR: "Xcódigo"
            CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
            CMAKE_OSX_ARCHITECTURES: "x86_64;arm64"
    se ejecuta: "${{ Matrix.runner }}"
    nombre: "${{ matriz.nombre }} (${{ matriz.compiler }})"
    entorno:
      CMAKE_GENERATOR: "${{ matriz.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matriz.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matriz.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matriz.CMAKE_SYSTEM_VERSION }}"
      CMAKE_OSX_DEPLOYMENT_TARGET: "${{ matriz.CMAKE_OSX_DEPLOYMENT_TARGET }}"
      CMAKE_OSX_ARCHITECTURES: "${{ matriz.CMAKE_OSX_ARCHITECTURES }}"
    pasos:
    - nombre: "Clon"
      usos: acciones/compra@v3
      con:
        submódulos: recursivo
        profundidad de búsqueda: 0
    - nombre: "Recopilar información"
      identificación: información
      caparazón: bash
      ejecutar: |
        # Definir archivo de especificación de compilación
        buildspec="${{ github.workspace }}/tercero/obs-studio/buildspec.json"

        # Versión de dependencias prediseñadas
        IFS=$'\n' buildspecdata=($(node ​​tools/buildspec.js "${buildspec}" "precompilado" "macos-universal"))
        echo "obs_deps_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "obs_deps_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "obs_deps_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Versión Qt
        IFS=$'\n' buildspecdata=($(node ​​tools/buildspec.js "${buildspec}" "qt${{ Matrix.qt }}" "macos-universal"))
        echo "qt_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "qt_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "qt_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Versión libOBS
        echo "obs_version=$(cd "${{ github.workspace }}/third-party/obs-studio" && git describe --tags --long)" >> "$GITHUB_ENV"
    - nombre: "Dependencia: Qt (caché)"
      ID: qt-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/qt"
        clave: "qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Qt"
      identificación: qt
      si: ${{ pasos.qt-cache.outputs.cache-hit != 'verdadero' }}
      caparazón: bash
      ejecutar: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/qt.tar.xz "${{ env.qt_url }}"
        si [[ ! -f "${{ github.workspace }}/build/qt" ]]; luego mkdir -p "${{ github.workspace }}/build/qt"; fi
        tar -xvf "/tmp/qt.tar.xz" -C "${{ github.workspace }}/build/qt"
    - nombre: "Dependencia: Dependencias prediseñadas de OBS Studio (caché)"
      id: obsdeps-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/obsdeps"
        clave: "obsdeps${{ env.obs_deps_hash }}-${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Dependencias prediseñadas de OBS Studio"
      identificación: obsdeps
      si: ${{ pasos.obsdeps-cache.outputs.cache-hit != 'verdadero' }}
      caparazón: bash
      ejecutar: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/obsdeps.tar.xz "${{ env.obs_deps_url }}"
        si [[ ! -f "${{ github.workspace }}/build/obsdeps" ]]; luego mkdir -p "${{ github.workspace }}/build/obsdeps"; fi
        tar -xvf "/tmp/obsdeps.tar.xz" -C "${{ github.workspace }}/build/obsdeps"
    - nombre: "Dependencia: Bibliotecas OBS (caché)"
      id: obs-cache
      usos: acciones/cache@v3
      con:
        ruta: "${{ github.workspace }}/build/obs"
        clave: "obs${{ env.obs_version }}-${{ Matrix.runner }}_${{ Matrix.compiler }}--obsdeps${{ env.obs_deps_hash }}-qt${{ env.qt_hash } }-${{ env.CACHE_VERSION }}"
    - nombre: "Dependencia: Bibliotecas OBS"
      identificación: observación
      si: ${{ pasos.obs-cache.outputs.cache-hit != 'verdadero' }}
      caparazón: bash
      ejecutar: |
        # Aplicar parches a obs-studio
        pushd "${{ github.workspace }}/tercero/obs-studio" > /dev/null
        para f en ../../patches/obs-studio/*.patch; hacer
          echo "Aplicando parche '${f}''..."
          [ -e "$f" ] || continuar
          aplicar git "$f"
        hecho
        popd > /dev/null

        # Construir obs-studio
        cmake \
          -S "${{ github.workspace }}/tercero/obs-studio" \
          -B "${{ github.workspace }}/build/obs" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obsdeps;${{ github.workspace }}/build/qt" \
          -DENABLE_PLUGINS=DESACTIVADO \
          -DENABLE_UI=DESACTIVADO \
          -DENABLE_SCRIPTING=DESACTIVADO
        cmake \
          --build "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --target obs-frontend-api
        cmake \
          --instalar "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --componente obs_libraries
    - nombre: "Configurar"
      continuar en caso de error: verdadero
      caparazón: bash
      ejecutar: |
        cmake \
          -S "${{ github.espacio de trabajo }}" \
          -B "${{ github.workspace }}/build/ci" \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/ci/install" \
          -DPACKAGE_NAME="streamfx-${{ matriz.nombre_paquete }}" \
          -DPACKAGE_PREFIX="${{ github.workspace }}/build/paquete" \
          -Dlibobs_DIR="${{ github.workspace }}/build/obs/install" \
          -DQt${{ matriz.qt }}_DIR="${{ github.workspace }}/build/qt" \
          -DFFmpeg_DIR="${{ github.workspace }}/build/obsdeps" \
          -DCURL_DIR="${{ github.workspace }}/build/obsdeps"
    - nombre: "Compilación: Depurar"
      continuar en caso de error: verdadero
      caparazón: bash
      ejecutar: |
        cmake --build "build/ci" --config Depuración --target StreamFX
    - nombre: "Compilación: Lanzamiento"
      caparazón: bash
      entorno:
        CMAKE_BUILD_TYPE: "RelWithDebInfo"
      ejecutar: |
        cmake --build "build/ci" --config RelWithDebInfo --target instalación
    - nombre: 'Embalaje: Instalar paquetes'
      si: comienza con (matriz.runner, 'macos')
      caparazón: bash
      ejecutar: |
        curl -kL "https://www.dropbox.com/scl/fi/fbal90nds32qx5khn8b0c/Packages-1.2.10.dmg?rlkey=a9xr4md58ro7278ioqd1k52w8&dl=1" -f --retry 5 -o "Packages.dmg"
        sudo hdiutil adjuntar ./Packages.dmg
        pushd /Volúmenes/Paquetes*
        instalador sudo -pkg ./Install\ Packages.pkg -target /
    - nombre: "Embalaje"
      caparazón: bash
      ejecutar: |
        paquetesbuild "${{ github.workspace }}/build/ci/installer.pkgproj"
    - nombre: "Artefactos"
      usos: acciones/upload-artifact@v1
      con:
        nombre: "${{ Matrix.runner }}-${{ Matrix.compiler }}-qt${{ Matrix.qt }}"
        ruta: "${{ github.workspace }}/build/paquete"
